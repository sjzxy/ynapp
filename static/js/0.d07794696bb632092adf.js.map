{"version":3,"sources":["webpack:///./src/utils/http/index.js","webpack:///./src/utils/api.js"],"names":["axios","defaults","headers","interceptors","request","use","config","token","sessionStorage","err","promise_default","a","reject","API","url","method","params","resolve","param","ajx","obj","str","k","substring","length","stringify","get","user_id","delete","put","post","then","res","status","data","code","location","href","error","errCode","catch","fetch","__webpack_exports__","loginAction","Content-Type","remindbasicinfo","getAllFieldType","approveRecordList","approveOwnRecordList","updateApproveRecord","queryApproveRecordDetail","appFileListByCondition","checkWaterMarkExistAPI"],"mappings":"8GAEAA,IAAMC,SAASC,QAAQ,gBAAkB,oCACzCF,IAAMG,aAAaC,QAAQC,IAAI,SAAAC,GAE7B,IAAIC,EAAQC,eAAeD,MAI3B,OAHIA,IACHD,EAAOJ,QAAP,MAA0BK,GAEpBD,GAER,SAAAG,GACC,OAAOC,EAAAC,EAAQC,OAAOH,KCNxB,IACMI,EAAM,SAACC,EAAKC,EAAQT,GAAd,OAAyB,SAAAU,GAAA,ODOhB,SAACF,EAAKE,EAAQD,EAAQT,GAI1C,OAHKU,IACJA,MAEM,IAAIN,EAAAC,EAAQ,SAACM,EAASL,GAC5B,IAAIM,SAAOC,SAEVD,EADGZ,GAAUA,EAAOJ,SAA8C,qBAAnCI,EAAOJ,QAAQ,gBACtCc,EAyCX,SAAmBI,GAClB,IAAIC,EAAM,GACV,IAAK,IAAIC,KAAKF,EACbC,GAAQC,EAAI,IAAMF,EAAIE,GAAK,IAE5B,OAAOD,EAAIE,UAAU,EAAGF,EAAIG,OAAS,GA5C3BC,CAAUT,GAEJ,QAAXD,EAEFI,EADGD,EACGlB,IAAM0B,IAAIZ,EAAM,IAAMI,EAAOZ,GAE7BN,IAAM0B,IAAIZ,EAAKR,GAED,WAAXS,GACVC,EAAOW,QAAU,MACjBR,EAAMnB,IAAM4B,OAAOd,EAAKI,EAAOZ,IAE/Ba,EADqB,QAAXJ,EACJf,IAAM6B,IAAIf,EAAKI,EAAOZ,GAEtBN,IAAM8B,KAAKhB,EAAKI,EAAOZ,GAE9Ba,EAAIY,KAAK,SAAAC,GACW,MAAfA,EAAIC,OACc,QAAjBD,EAAIE,KAAKC,MAAmC,QAAjBH,EAAIE,KAAKC,MAAmC,QAAjBH,EAAIE,KAAKC,KAClEC,SAASC,KAAO,IAEhBpB,EAAQe,EAAIE,MAGkB,MAA3BF,EAAIE,KAAKI,MAAMC,QAElBH,SAASC,KAAO,IAEhBpB,EAAQe,EAAIE,QAGZM,MAAM,SAAC/B,GACTG,EAAOH,OChDqCgC,CADuB,OACJ3B,EAAKE,EAAQD,GAAU,OAAQT,SAElFoC,EAAA,GACbC,YAAa9B,EAAI,cAAe,QAC9BX,SACE0C,eAAgB,sBAGpBC,gBAAiBhC,EAAI,0BAA2B,QAC9CX,SACE0C,eAAgB,sBAGpBE,gBAAiBjC,EAAI,yBAA0B,OAC7CX,aAGF6C,kBAAmBlC,EAAI,mCAAoC,QACzDX,SACE0C,eAAgB,sBAGpBI,qBAAsBnC,EAAI,sCAAuC,QAC/DX,SACE0C,eAAgB,sBAGpBK,oBAAqBpC,EAAI,qCAAsC,QAC7DX,SACE0C,eAAgB,sBAGpBM,yBAA0BrC,EAAI,0CAA2C,UACzEsC,uBAAwBtC,EAAI,+BAAgC,QAC1DX,SACE0C,eAAgB,sBAGpBQ,uBAAwBvC,EAAI,iCAAkC,QAC5DX,SACE0C,eAAgB","file":"static/js/0.d07794696bb632092adf.js","sourcesContent":["import Vue from 'vue';\nimport axios from 'axios';\naxios.defaults.headers['Content-Type'] = 'application/x-www-form-urlencoded';\naxios.interceptors.request.use(config => {\n\t\t// 判断是否存在token，如果存在的话，则每个http header都加上token 用于将来的身份验证\n\t\tlet token = sessionStorage.token;\n\t\tif (token) {\n\t\t\tconfig.headers['token'] = token;\n\t\t}\n\t\treturn config;\n\t},\n\terr => {\n\t\treturn Promise.reject(err);\n\t});\nexport const fetch = (url, params, method, config) => {\n\tif (!params) {\n\t\tparams = {};\n\t}\n\treturn new Promise((resolve, reject) => {\n\t\tlet param, ajx;\n\t\tif (config && config.headers && config.headers['Content-Type'] === 'application/json') {\n\t\t\tparam = params;\n\t\t} else {\n\t\t\tparam = stringify(params);\n\t\t}\n\t\tif (method === 'get') {\n\t\t\tif (param) {\n\t\t\t\tajx = axios.get(url + '?' + param, config)\n\t\t\t} else {\n\t\t\t\tajx = axios.get(url, config)\n\t\t\t}\n\t\t} else if (method === 'delete') {\n\t\t\tparams.user_id = '222';\n\t\t\tajx = axios.delete(url, param, config);\n\t\t} else if (method === 'put') {\n\t\t\tajx = axios.put(url, param, config);\n\t\t} else {\n\t\t\tajx = axios.post(url, param, config);\n\t\t}\n\t\tajx.then(res => {\n\t\t\tif (res.status === 200) {\n\t\t\t\tif (res.data.code == '1001' || res.data.code == '1002' || res.data.code == '1003') { //token失效\n\t\t\t\t\tlocation.href = '/';\n\t\t\t\t} else {\n\t\t\t\t\tresolve(res.data);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (res.data.error.errCode === 600) {\n\t\t\t\t\t// 登陆信息不完整\n\t\t\t\t\tlocation.href = '/';\n\t\t\t\t} else {\n\t\t\t\t\tresolve(res.data);\n\t\t\t\t}\n\t\t\t}\n\t\t}).catch((err) => {\n\t\t\treject(err)\n\t\t\t//errorHandle(err);\n\t\t});\n\t});\n};\n\n// 将application/json参数格式 转换为application/x-www-form-urlencoded方式\nfunction stringify(obj) {\n\tlet str = '';\n\tfor (let k in obj) {\n\t\tstr += (k + '=' + obj[k] + '&');\n\t}\n\treturn str.substring(0, str.length - 1);\n};\n\nfunction errorHandle() {\n\t// 处理接口错误\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/http/index.js","import {\n  fetch\n} from './http';\n// request payload形式的参数需要配置，headers的content-Type: application/json,\n// 如果不配置默认是form Data形式\n// const development = 'http://localhost:3618';\nconst development = process.env.NODE_ENV === \"development\" ? '/api' : '/api';\nconst API = (url, method, config) => params => fetch(development+ url, params, method || 'post', config || {});\n\nexport default {\n  loginAction: API('/user/login', 'post', {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  remindbasicinfo: API('/remind/remindbasicinfo', 'post', {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }), //消息通知\n  getAllFieldType: API('/table/getAllFieldType', 'get', {\n    headers: {}\n  }), //获取表单字段控件的类型\n  /* 审批管理 */\n  approveRecordList: API('/approveRecord/approveRecordList', 'post', {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  approveOwnRecordList: API('/approveRecord/approveOwnRecordList', 'post', {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  updateApproveRecord: API('/approveRecord/updateApproveRecord', 'post', {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  queryApproveRecordDetail: API('/approveRecord/queryApproveRecordDetail', 'get', {}),\n  appFileListByCondition: API('/file/appFileListByCondition', 'post', {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  checkWaterMarkExistAPI: API('/watermark/checkWaterMarkExist', 'post', {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }), // 打印文件校验\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/api.js"],"sourceRoot":""}